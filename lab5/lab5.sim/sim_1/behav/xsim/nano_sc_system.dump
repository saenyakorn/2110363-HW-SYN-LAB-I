$date
   Sun Oct 17 15:20:41 2021
$end
$version
  2020.2
$end
$timescale
  1ps
$end
$scope module nano_sc_system $end
$var wire 32 ! p_address [31:0] $end
$var wire 32 " p_data [31:0] $end
$var wire 32 # d_address [31:0] $end
$var wire 1 $ mem_wr $end
$var wire 32 % d_data [31:0] $end
$var reg 1 & clock $end
$var reg 1 ' nreset $end
$scope module CPU $end
$var wire 32 ! p_address [31:0] $end
$var wire 32 " p_data [31:0] $end
$var wire 32 # d_address [31:0] $end
$var wire 1 $ mem_wr $end
$var wire 32 % d_data [31:0] $end
$var wire 1 ( clock $end
$var wire 1 ) nreset $end
$var wire 32 * instruction [31:0] $end
$var wire 6 + opcode [5:0] $end
$var wire 5 , rs [4:0] $end
$var wire 5 - rt [4:0] $end
$var wire 5 . rd [4:0] $end
$var wire 11 / reserved [10:0] $end
$var wire 16 0 imm [15:0] $end
$var wire 26 1 addr [25:0] $end
$var reg 32 2 pc [31:0] $end
$var wire 1 3 sel_addpc $end
$var wire 1 4 sel_pc $end
$var wire 30 5 pc_add [29:0] $end
$var wire 1 6 pc_cout $end
$var wire 30 7 pc_add_b [29:0] $end
$var wire 30 8 addr_zeroext [29:0] $end
$var wire 30 9 pc_new [29:0] $end
$var wire 32 : imm_ext [31:0] $end
$var wire 2 ; ext_ops [1:0] $end
$var reg 1 < z_flag $end
$var reg 1 = c_flag $end
$var wire 1 > reg_wr $end
$var wire 1 ? sel_wr $end
$var wire 1 @ sel_data $end
$var wire 1 A sel_b $end
$var wire 1 B z_new $end
$var wire 1 C c_new $end
$var wire 3 D alu_ops [2:0] $end
$var wire 32 E A [31:0] $end
$var wire 32 F B [31:0] $end
$var wire 32 G data_selected [31:0] $end
$var wire 32 H data_S [31:0] $end
$var wire 32 I data_M [31:0] $end
$var wire 32 J B_selected [31:0] $end
$var wire 5 K rw [4:0] $end
$var wire 4 L overrided_alu_ops [3:0] $end
$scope module PCADDER $end
$var wire 30 5 S [29:0] $end
$var wire 1 6 Cout $end
$var wire 30 M A [29:0] $end
$var wire 30 7 B [29:0] $end
$var wire 1 N Cin $end
$upscope $end
$scope module MUXADDPC $end
$var wire 30 7 out [29:0] $end
$var wire 30 O in0 [29:0] $end
$var wire 30 P in1 [29:0] $end
$var wire 1 3 sel $end
$upscope $end
$scope module MUXSELPC $end
$var wire 30 9 out [29:0] $end
$var wire 30 5 in0 [29:0] $end
$var wire 30 8 in1 [29:0] $end
$var wire 1 4 sel $end
$upscope $end
$scope module EXTENDER $end
$var reg 32 Q data32 [31:0] $end
$var wire 16 0 data16 [15:0] $end
$var wire 2 ; ext_ops [1:0] $end
$upscope $end
$scope module MUXRW $end
$var wire 5 K out [4:0] $end
$var wire 5 . in0 [4:0] $end
$var wire 5 - in1 [4:0] $end
$var wire 1 ? sel $end
$upscope $end
$scope module REGFILE $end
$var wire 32 E A [31:0] $end
$var wire 32 F B [31:0] $end
$var wire 32 G data [31:0] $end
$var wire 5 , ra [4:0] $end
$var wire 5 - rb [4:0] $end
$var wire 5 K rw [4:0] $end
$var wire 1 R nwr $end
$var wire 1 ( clock $end
$var integer 32 S i $end
$upscope $end
$scope module MUXDATA $end
$var wire 32 G out [31:0] $end
$var wire 32 H in0 [31:0] $end
$var wire 32 I in1 [31:0] $end
$var wire 1 @ sel $end
$upscope $end
$scope module MUXB $end
$var wire 32 J out [31:0] $end
$var wire 32 F in0 [31:0] $end
$var wire 32 : in1 [31:0] $end
$var wire 1 A sel $end
$upscope $end
$scope module ALU $end
$var reg 32 T S [31:0] $end
$var wire 1 B z $end
$var reg 1 U Cout $end
$var wire 32 E A [31:0] $end
$var wire 32 J B [31:0] $end
$var wire 1 V Cin $end
$var wire 4 L alu_ops [3:0] $end
$upscope $end
$scope module CONTROLUNIT $end
$var reg 1 W sel_pc $end
$var reg 1 X sel_addpc $end
$var reg 1 Y sel_wr $end
$var reg 1 Z sel_b $end
$var reg 1 [ sel_data $end
$var reg 1 \ reg_wr $end
$var reg 1 ] mem_wr $end
$var reg 2 ^ ext_ops [1:0] $end
$var reg 4 _ alu_ops [3:0] $end
$var wire 6 + opcode [5:0] $end
$var wire 1 B z_flag $end
$upscope $end
$upscope $end
$scope module PROGMEM $end
$var wire 32 " data [31:0] $end
$var wire 8 ` address [7:0] $end
$upscope $end
$scope module DATAMEM $end
$var wire 32 % data [31:0] $end
$var wire 8 a address [7:0] $end
$var wire 1 $ wr $end
$var wire 1 b clock $end
$var wire 12 c mapped_in [11:0] $end
$var wire 16 d mapped_out [15:0] $end
$var reg 32 e data_out [31:0] $end
$var integer 32 f i $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx !
bx "
bx #
x$
bx %
0&
0'
0(
0)
bx *
bx +
bx ,
bx -
bx .
bx /
bx 0
bx 1
bx 2
x3
x4
bx 5
x6
bx 7
b0xxxxxxxxxxxxxxxxxxxxxxxxxx 8
bx 9
bx :
bx ;
x<
x=
x>
x?
x@
xA
xB
xC
bx D
bx E
bx F
bx G
bx H
bx I
bx J
bx K
bx L
bx M
1N
b0 O
bx P
bx Q
xR
b100000 S
bx T
xU
xV
xW
xX
xY
xZ
x[
x\
x]
bx ^
bx _
bx `
bx a
0b
bz c
b0 d
bx e
bx f
$end
#20000
b0 !
bx "
1&
1(
b0 2
bx 5
x6
0<
0=
b0 M
0V
b0 `
1b
#40000
0&
1'
0(
1)
0b
#60000
bx00 !
bx "
1&
1(
bx00 2
bx 5
x6
x<
x=
bx M
xV
bx `
1b
#80000
0&
0(
0b
#100000
1&
1(
bx00 2
1b
#120000
0&
0(
0b
#140000
1&
1(
bx00 2
1b
#160000
0&
0(
0b
#180000
1&
1(
bx00 2
1b
#200000
0&
0(
0b
#220000
1&
1(
bx00 2
1b
#240000
0&
0(
0b
#260000
1&
1(
bx00 2
1b
#280000
0&
0(
0b
#300000
1&
1(
bx00 2
1b
#320000
0&
0(
0b
#340000
1&
1(
bx00 2
1b
#360000
0&
0(
0b
#380000
1&
1(
bx00 2
1b
#400000
0&
0(
0b
#420000
1&
1(
bx00 2
1b
#440000
0&
0(
0b
#460000
1&
1(
bx00 2
1b
#480000
0&
0(
0b
#500000
1&
1(
bx00 2
1b
#520000
0&
0(
0b
#540000
1&
1(
bx00 2
1b
#560000
0&
0(
0b
#580000
1&
1(
bx00 2
1b
#600000
0&
0(
0b
#620000
1&
1(
bx00 2
1b
#640000
0&
0(
0b
#660000
1&
1(
bx00 2
1b
#680000
0&
0(
0b
#700000
1&
1(
bx00 2
1b
#720000
0&
0(
0b
#740000
1&
1(
bx00 2
1b
#760000
0&
0(
0b
#780000
1&
1(
bx00 2
1b
#800000
0&
0(
0b
#820000
1&
1(
bx00 2
1b
#840000
0&
0(
0b
#860000
1&
1(
bx00 2
1b
#880000
0&
0(
0b
#900000
1&
1(
bx00 2
1b
#920000
0&
0(
0b
#940000
1&
1(
bx00 2
1b
#960000
0&
0(
0b
#980000
1&
1(
bx00 2
1b
#1000000
0&
0(
0b
